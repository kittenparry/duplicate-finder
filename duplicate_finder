#!/usr/bin/env python3

import os
import tkinter as tk
import platform
import time
import subprocess
import shutil

class COL:
	FAIL = '\033[91m'
	WARNING = '\033[93m'
	UNDERLINE = '\033[4m'
	BOLD = '\033[1m'
	ENDC = '\033[0m'

def get_files():
	"""Return a list of files/folders from 1-level down of given paths.
	This is to get the files inside models' directories.
	An example read path is /mnt/disk-f/Archive/porn/vids/model_name/*
	"""
	partition_letters = ['d', 'e', 'f', 'g', 'h', 'j']
	loop_path = [
		os.path.join('Archive', 'porn', 'vids'),
		os.path.join('Archive', 'porn', 'pics'),
		os.path.join('Downloads', 'porn'),
		os.path.join('arch', 'porn') # same as ARCH_DIR
	]

	dirs_prefix = []
	if platform.system() == 'Linux':
		for letter in partition_letters:
			dirs_prefix.append(os.path.join('/mnt', 'disk-%s' % letter))
	elif platform.system() == 'Windows':
		partition_letters.remove('j')
		partition_letters.append('i')
		for letter in partition_letters:
			dirs_prefix.append('%s:/' % letter)

	dirs_models = []
	for prefix in dirs_prefix:
		for suffix in loop_path:
			try:
				# append full path to model names
				dirs_models += [os.path.join(prefix, suffix, item) for item in os.listdir(os.path.join(prefix, suffix))]
			except FileNotFoundError:
				pass
			except Exception as e:
				print(e)

	# list of all files & directories
	obj_names = []
	obj_path = []
	for dire in dirs_models:
		try:
			obj_names += os.listdir(dire)
			obj_path += [os.path.join(dire, item) for item in os.listdir(dire)]
		except Exception as e:
			print(e)

	# names & paths to duplicates
	obj_list = []
	for n, name in enumerate(obj_names):
		if obj_names.count(name) > 1:
			obj = lambda: None
			obj.name = name
			obj.path = obj_path[n]
			obj_list.append(obj)

	# sort list by obj names
	obj_list = sorted(obj_list, key=lambda x: x.name)
	return obj_list


class Gui(tk.Frame):
	def __init__(self, master = None):
		tk.Frame.__init__(self, master)
		self.base = tk.Frame(master)
		self.sub = tk.Frame(master)
		self.bottom = tk.Frame(master)
		self.base.grid(row=0, column=0)
		self.sub.grid(row=1, column=0)
		self.bottom.grid(row=2, column=0)

		print('%s: Reading through directories..' % time.strftime('%H:%M:%S'))
		start = time.time()
		self.obj_list = get_files()
		end = time.time()
		print('%s: Done.' % time.strftime('%H:%M:%S'))
		self.passed = end - start
		self.draw_elements()

	def draw_elements(self):
		"""Listbox listing paths to duplicates,
		Delete & explore buttons,
		Label with load time printed.
		"""
		self.listbox = tk.Listbox(self.base, height=25, width=100)
		self.btn_del = tk.Button(self.sub, text='Delete', command=self.delete)
		self.btn_exp = tk.Button(self.sub, text='Explore', command=self.explore)
		self.time_passed = tk.Label(self.bottom, text='%.2f seconds to read files.' % self.passed)

		self.listbox.bind('<Double-1>', self.double_click_ev)
		self.listbox.bind('<Button-3>', self.right_click_ev)

		self.build_list()

		self.listbox.grid(row=0, column=0)
		self.elements = [self.btn_del, self.btn_exp, self.time_passed]
		for el in self.elements:
			el.pack(side='left', pady=2, padx=1)

		self.xscroll = tk.Scrollbar(self.base, orient='horizontal', command=self.listbox.xview)
		self.xscroll.grid(row=1, column=0, sticky='ew')
		self.yscroll = tk.Scrollbar(self.base, orient='vertical', command=self.listbox.yview)
		self.yscroll.grid(row=0, column=1, sticky='ns')
		self.listbox.configure(yscrollcommand=self.yscroll.set, xscrollcommand=self.xscroll.set)

	def delete(self):
		"""Delete file/directory in selected path, re-populate the listbox."""
		path = self.listbox.get(self.listbox.curselection())
		print('deleting..')
		if os.path.isdir(path):
			shutil.rmtree(path)
		elif os.path.isfile(path):
			os.remove(path)
		print('%sdeleted%s: %s' % (COL.FAIL, COL.ENDC, path))
		self.del_duplicates(path)

	def build_list(self):
		"""Populate the listbox with paths."""
		self.listbox.delete(0, 'end')
		for n, obj in enumerate(self.obj_list):
			self.listbox.insert(n, obj.path)

	def del_duplicates(self, path):
		"""Remove deleted objects from the memory & listbox.

		keyword args:
		path -- path value of deleted object
		"""
		# get first duplicate obj with the path
		for el in self.obj_list:
			if el.path == path:
				obj_one = el

		# get second one using first one's name
		for el in self.obj_list:
			if el.name == obj_one.name and el.path != obj_one.path:
				obj_two = el

		# remove both from the list
		if obj_one in self.obj_list:
			self.obj_list.remove(obj_one)
		if obj_two in self.obj_list:
			self.obj_list.remove(obj_two)

		self.build_list()

	# needs left click select first before right click explore
	def right_click_ev(self, event):
		self.explore()

	def double_click_ev(self, event):
		self.delete()

	def explore(self):
		"""Explore the selected path in file manager."""
		path = self.listbox.get(self.listbox.curselection())
		if platform.system() == 'Linux':
			subprocess.Popen(['pcmanfm', path])
		# initial path vars are not with Windows in mind
		# but let's just pretend for a moment
		elif platform.system() == 'Windows':
			os.startfile(path)


def get_geometry():
	"""Return geometry to spawn the program in the middle of the screen.
	Only in 1920px width.
	"""
	if platform.system() == 'Linux':
		program_width = 817
		screen_width = 1920
		x_position = (screen_width - program_width) / 2
		geo_str = '%dx475+%d+30' % (program_width, x_position)
	return geo_str

def start_gui():
	root = tk.Tk(className='duplicate_finder')
	if platform.system() == 'Linux':
		root.tk.call('tk', 'scaling', 1.3)
	root.title('duplicate_finder')
	root.geometry(get_geometry())
	app = Gui(master=root)
	app.mainloop()


if __name__ == '__main__':
	start_gui()
