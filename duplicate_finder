#!/usr/bin/env python3

import os

class COL:
	FAIL = '\033[91m'
	WARNING = '\033[93m'
	UNDERLINE = '\033[4m'
	BOLD = '\033[1m'
	ENDC = '\033[0m'

def get_files():
	LOOP_PARTITION_LETTERS = ['d', 'e', 'f', 'g', 'h', 'j']
	LOOP_PATH = [
		os.path.join('Archive', 'porn', 'vids'),
		os.path.join('Archive', 'porn', 'pics'),
		os.path.join('Downloads', 'porn'),
		os.path.join('arch', 'porn') # same as ARCH_DIR
	]
	dirs_prefix = []
	for letter in LOOP_PARTITION_LETTERS:
		dirs_prefix.append(os.path.join('/mnt', 'disk-%s' % letter))


	dirs_models = []
	for prefix in dirs_prefix:
		for suffix in LOOP_PATH:
			try:
				# append full path to model names
				dirs_models += [os.path.join(prefix, suffix, item) for item in os.listdir(os.path.join(prefix, suffix))]
			except FileNotFoundError:
				pass
			except Exception as e:
				print(e)

	# list of all files & directories
	obj_names = []
	obj_path = []
	for dire in dirs_models:
		try:
			obj_names += os.listdir(dire)
			obj_path += [os.path.join(dire, item) for item in os.listdir(dire)]
		except Exception as e:
			print(e)

	print(obj_names[0])
	print(obj_path[0])

	# names & paths to duplicates
	# duplicates_list = [name for name in obj_names if obj_names.count(name) > 1]
	# TODO: sort duplicates (and their paths, somehow) by name
	# could be likely done with an object array
	# so instead of what i'm doing below, create and push objects to a single array
	# {name: name, path: path}
	# then sort by name, something like sorted(array, key=name) i imagine
	# or apparently this sorted(array, key=lambda x: x.name, reverse=True) reverse if needed
	dupl_names = []
	dupl_path = []
	for n, name in enumerate(obj_names):
		if obj_names.count(name) > 1:
			dupl_names.append(name)
			dupl_path.append(obj_path[n])

	for n, name in enumerate(dupl_names):
		print('---')
		print(dupl_path[n])
		print(name)

	# currently prints names of the actors
	# so, i'll likely need to listdir paths to these names

	# then put the output of those into a list
	# and their paths into a separate list as previously "planned"

	# might not need a gui after all
	# use colours

if __name__ == '__main__':
	get_files()
